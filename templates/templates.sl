% Open templates and do some replacements
%
% 1.0 Guenter Milde
%     Based on template (without s) modes 
%     from Audun Ytterdal and Dino Leonardo Sangoi
% 1.1 compatibility with Mikael Hultgren's template.sl added by P. Boekholt
% 1.1.1 2004-02-23 extension to insert_template()
% 1.1.2 2004-10-11 bugfix: changed order of find_template and insert_template
% 1.1.3 2004-11-18 bugfix: find_template should call insert_template_file
%
% USAGE
% 
% Copy templates.sl to your Library-Path
% Place your templates into Templates_Dir
% 
% Add something like this to your ~/.jedrc
%   require("template");
%   % E.g. KDE-Users might set Templates_Dir
%   variable Templates_Dir = "~/Desktop/Templates";
%   define templates_load_popup_hook (menubar)
%   {
%       menu_insert_item ("Save &Buffers", "Global.&File", 
%                         "&New from Template", "new_from_template");
%   }
%   append_to_hook ("load_popup_hooks", &templates_load_popup_hook);
% 
% Add something like this for your modehooks
% 
% define slang_mode_hook ()
% { 
%   if (bobp and eobp)
%      insert_template("template.sl");
% }
% 
% "template.sl" is a plain file except some special keywords
% 
% <REALNAME> will be replaced with your full name
% <USERNAME> will be replaced with your username
% <EMAIL>    will be replaced with your email
% <DATE>     will be replaced with the current date in iso-8601 notation
% <CURSOR>   will be removed and your cursor will be placed there.
% <FILENAME>         replaced with buffer_filename
% <FILENAME_SANS>    replaced with buffer_filename without extension
 

% _debug_info = 1;

% Variables
% =========

% The directory where you store your templates.
custom_variable("Templates_Dir", 
   path_concat(Jed_Home_Directory, "templates/"));

% special strings that get replaced with autogenerated values
static variable replacements = Assoc_Type[String_Type];
replacements["<REALNAME>"] = extract_element(get_realname(), 0, ',');
replacements["<USERNAME>"] = get_username();
replacements["<EMAIL>"]    = get_emailaddress();

static variable time_struct = localtime(_time);
replacements["<DATE>"] = sprintf("%d-%02d-%02d", time_struct.tm_year+1900, 
		                 time_struct.tm_mon, time_struct.tm_mday);

% for compatibility with Mikael Hutgren's template.sl
replacements["@author@"] = replacements["<REALNAME>"];
replacements["@mail@"] = replacements["<EMAIL>"];

% Functions
% =========

define templates_add_replacement(key, repl)
{
   replacements[key] = repl;
}

% insert a template file into the buffer
public define insert_template_file() % (file=ask)
{
   replacements["<FILENAME>"] = path_basename(buffer_filename);
   replacements["<FILENAME_SANS>"] = 
     path_sans_extname(replacements["<FILENAME>"]);
   replacements["@filename@"] = replacements["<FILENAME>"];
   replacements["@filename_sans@"] = replacements["<FILENAME_SANS>"];
   runhooks("insert_template_file_hook");
   variable name, key;
   if (_NARGS)
     {
	name = ();
	name = path_concat(Templates_Dir, name);
     }
   else
     name = read_with_completion("Find template:", "", Templates_Dir, 'f');
   push_mark();
   () = insert_file(name);
   narrow_to_region();

   bob;
   foreach(replacements) using ("keys", "values")
     replace();
   if (fsearch("<CURSOR>"))
     deln(strlen("<CURSOR>"));
   else if (fsearch("@point@"))
     deln(strlen("@point@"));

   else
     eob();
   widen();
}


% This provides compatibility with Mikael's template.sl.  Put
% template.sl.tpl, template.html.tpl etc. in the directory "templates" in
% your jed_home.  To insert the template for every new file,
% 
% add_to_hook("_jed_find_file_after_hooks", "insert_template");
% 
% If you only need a template in html_mode say, add it to html_mode_hook.
% To insert a template into a non-empty buffer, use the
% insert_template_file() function
define insert_template()
{
   % Check if this is an empty buffer
   !if(bobp() and eobp()) return;

   variable tmpl_file, ext = path_extname( buffer_filename ());
   !if (strlen(ext)) return;
   % Assemble the filename of the tmpl
   % it looks like template.cc.tpl
   tmpl_file = dircat(Templates_Dir, strcat("template", ext, ".tpl" ));
   if (1 == file_status (tmpl_file))
     return insert_template_file(tmpl_file);
   % Check for the simpler template.cc too.
   % As it is in a templates dir, we don't need the .tph extension
   tmpl_file = dircat(Templates_Dir, strcat("template", ext));
   if (1 == file_status (tmpl_file))
     return insert_template_file(tmpl_file);
}

%!%+
%\function{find_template}
%\synopsis{open a new buffer and fill with a template}
%\usage{ find_template([template_name])}
%\description
%   Opens a new buffer and asks for a template file name to insert (if not 
%   given as optional argument)
%\notes
%   For automatic insertion of a template into an empty buffer 
%   a la Hultgren see insert_template()
%\seealso{Templates_Dir, insert_template, insert_template_file}
%!%-
public define find_template()
{
   variable args = __pop_args (_NARGS);
   sw2buf("*new*");
   insert_template_file(__push_args(args));
}

provide("templates");
